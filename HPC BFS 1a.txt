#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>
using namespace std;

const int MAX = 100000;
vector<int> graph[MAX];
bool visited[MAX];         // Parallel BFS function
void parallelBFS(int start)
{     queue<int> q;
    q.push(start);
    visited[start] = true;
    cout << "Parallel BFS Traversal: ";
    while (!q.empty()) {
    	int qSize = q.size();
    	vector<int> nextLevel;
    	#pragma omp parallel for
    	for (int i = 0; i < qSize; i++) {
    		int node;
            #pragma omp critical
            {                 node = q.front();
                q.pop();
                cout << node << " ";
            }

            #pragma omp parallel for
            for (int j = 0; j < graph[node].size(); j++) {
            	int adj = graph[node][j];
                #pragma omp critical
                {                     if (!visited[adj]) {
                	visited[adj] = true;
                	nextLevel.push_back(adj);
                    }
                }
            }
        }

        for (int i = 0; i < nextLevel.size(); i++) {
            q.push(nextLevel[i]);
        }
    }
    cout << endl;
}
int main() {
	int n, m, start_node;
	cout << "Enter No of Nodes, Edges, and Start Node: ";
	cin >> n >> m >> start_node;

    cout << "Enter Pairs of Edges:\n";
    for (int i = 0; i < m; i++) {
    	int u, v;
    	cin >> u >> v;
    	graph[u].push_back(v);
    	graph[v].push_back(u); // Assuming an undirected graph
    }
    // Initialize visited array     #pragma omp parallel for
    for (int i = 0; i < n; i++) {
    	visited[i] = false;
    }
    // Call Parallel BFS     parallelBFS(start_node);

    return 0;
}
